/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.booking.replication.augmenter.model.definitions;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DDL extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5317464314273646858L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DDL\",\"namespace\":\"com.booking.replication.augmenter.model.definitions\",\"fields\":[{\"name\":\"query\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"schema\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"isCompatibleSchemaChange\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DDL> ENCODER =
      new BinaryMessageEncoder<DDL>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DDL> DECODER =
      new BinaryMessageDecoder<DDL>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DDL> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DDL> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DDL>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DDL to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DDL from a ByteBuffer. */
  public static DDL fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence query;
  @Deprecated public java.lang.CharSequence schema;
  @Deprecated public java.lang.Boolean isCompatibleSchemaChange;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DDL() {}

  /**
   * All-args constructor.
   * @param query The new value for query
   * @param schema The new value for schema
   * @param isCompatibleSchemaChange The new value for isCompatibleSchemaChange
   */
  public DDL(java.lang.CharSequence query, java.lang.CharSequence schema, java.lang.Boolean isCompatibleSchemaChange) {
    this.query = query;
    this.schema = schema;
    this.isCompatibleSchemaChange = isCompatibleSchemaChange;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return query;
    case 1: return schema;
    case 2: return isCompatibleSchemaChange;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: query = (java.lang.CharSequence)value$; break;
    case 1: schema = (java.lang.CharSequence)value$; break;
    case 2: isCompatibleSchemaChange = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'query' field.
   * @return The value of the 'query' field.
   */
  public java.lang.CharSequence getQuery() {
    return query;
  }

  /**
   * Sets the value of the 'query' field.
   * @param value the value to set.
   */
  public void setQuery(java.lang.CharSequence value) {
    this.query = value;
  }

  /**
   * Gets the value of the 'schema' field.
   * @return The value of the 'schema' field.
   */
  public java.lang.CharSequence getSchema$() {
    return schema;
  }

  /**
   * Sets the value of the 'schema' field.
   * @param value the value to set.
   */
  public void setSchema$(java.lang.CharSequence value) {
    this.schema = value;
  }

  /**
   * Gets the value of the 'isCompatibleSchemaChange' field.
   * @return The value of the 'isCompatibleSchemaChange' field.
   */
  public java.lang.Boolean getIsCompatibleSchemaChange() {
    return isCompatibleSchemaChange;
  }

  /**
   * Sets the value of the 'isCompatibleSchemaChange' field.
   * @param value the value to set.
   */
  public void setIsCompatibleSchemaChange(java.lang.Boolean value) {
    this.isCompatibleSchemaChange = value;
  }

  /**
   * Creates a new DDL RecordBuilder.
   * @return A new DDL RecordBuilder
   */
  public static com.booking.replication.augmenter.model.definitions.DDL.Builder newBuilder() {
    return new com.booking.replication.augmenter.model.definitions.DDL.Builder();
  }

  /**
   * Creates a new DDL RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DDL RecordBuilder
   */
  public static com.booking.replication.augmenter.model.definitions.DDL.Builder newBuilder(com.booking.replication.augmenter.model.definitions.DDL.Builder other) {
    return new com.booking.replication.augmenter.model.definitions.DDL.Builder(other);
  }

  /**
   * Creates a new DDL RecordBuilder by copying an existing DDL instance.
   * @param other The existing instance to copy.
   * @return A new DDL RecordBuilder
   */
  public static com.booking.replication.augmenter.model.definitions.DDL.Builder newBuilder(com.booking.replication.augmenter.model.definitions.DDL other) {
    return new com.booking.replication.augmenter.model.definitions.DDL.Builder(other);
  }

  /**
   * RecordBuilder for DDL instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DDL>
    implements org.apache.avro.data.RecordBuilder<DDL> {

    private java.lang.CharSequence query;
    private java.lang.CharSequence schema;
    private java.lang.Boolean isCompatibleSchemaChange;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.booking.replication.augmenter.model.definitions.DDL.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.query)) {
        this.query = data().deepCopy(fields()[0].schema(), other.query);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.schema)) {
        this.schema = data().deepCopy(fields()[1].schema(), other.schema);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isCompatibleSchemaChange)) {
        this.isCompatibleSchemaChange = data().deepCopy(fields()[2].schema(), other.isCompatibleSchemaChange);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DDL instance
     * @param other The existing instance to copy.
     */
    private Builder(com.booking.replication.augmenter.model.definitions.DDL other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.query)) {
        this.query = data().deepCopy(fields()[0].schema(), other.query);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.schema)) {
        this.schema = data().deepCopy(fields()[1].schema(), other.schema);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isCompatibleSchemaChange)) {
        this.isCompatibleSchemaChange = data().deepCopy(fields()[2].schema(), other.isCompatibleSchemaChange);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'query' field.
      * @return The value.
      */
    public java.lang.CharSequence getQuery() {
      return query;
    }

    /**
      * Sets the value of the 'query' field.
      * @param value The value of 'query'.
      * @return This builder.
      */
    public com.booking.replication.augmenter.model.definitions.DDL.Builder setQuery(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.query = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'query' field has been set.
      * @return True if the 'query' field has been set, false otherwise.
      */
    public boolean hasQuery() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'query' field.
      * @return This builder.
      */
    public com.booking.replication.augmenter.model.definitions.DDL.Builder clearQuery() {
      query = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'schema' field.
      * @return The value.
      */
    public java.lang.CharSequence getSchema$() {
      return schema;
    }

    /**
      * Sets the value of the 'schema' field.
      * @param value The value of 'schema'.
      * @return This builder.
      */
    public com.booking.replication.augmenter.model.definitions.DDL.Builder setSchema$(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.schema = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'schema' field has been set.
      * @return True if the 'schema' field has been set, false otherwise.
      */
    public boolean hasSchema$() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'schema' field.
      * @return This builder.
      */
    public com.booking.replication.augmenter.model.definitions.DDL.Builder clearSchema$() {
      schema = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'isCompatibleSchemaChange' field.
      * @return The value.
      */
    public java.lang.Boolean getIsCompatibleSchemaChange() {
      return isCompatibleSchemaChange;
    }

    /**
      * Sets the value of the 'isCompatibleSchemaChange' field.
      * @param value The value of 'isCompatibleSchemaChange'.
      * @return This builder.
      */
    public com.booking.replication.augmenter.model.definitions.DDL.Builder setIsCompatibleSchemaChange(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.isCompatibleSchemaChange = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'isCompatibleSchemaChange' field has been set.
      * @return True if the 'isCompatibleSchemaChange' field has been set, false otherwise.
      */
    public boolean hasIsCompatibleSchemaChange() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'isCompatibleSchemaChange' field.
      * @return This builder.
      */
    public com.booking.replication.augmenter.model.definitions.DDL.Builder clearIsCompatibleSchemaChange() {
      isCompatibleSchemaChange = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DDL build() {
      try {
        DDL record = new DDL();
        record.query = fieldSetFlags()[0] ? this.query : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.schema = fieldSetFlags()[1] ? this.schema : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.isCompatibleSchemaChange = fieldSetFlags()[2] ? this.isCompatibleSchemaChange : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DDL>
    WRITER$ = (org.apache.avro.io.DatumWriter<DDL>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DDL>
    READER$ = (org.apache.avro.io.DatumReader<DDL>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
